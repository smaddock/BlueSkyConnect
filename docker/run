#!/bin/bash

# BlueSkyConnect macOS SSH tunnel
# See https://github.com/BlueSkyTools/BlueSkyConnect
# Licensed under the Apache License, Version 2.0

# set mysql admin password
if [[ $MYSQLROOTPASS ]]; then
  MYSQL_ROOT_PASS=$MYSQLROOTPASS
elif [[ $DB_ENV_MYSQL_ROOT_PASSWORD ]]; then
  # let’s check for the linked container’s password
  MYSQL_ROOT_PASS=$DB_ENV_MYSQL_ROOT_PASSWORD
else
  MYSQL_ROOT_PASS="admin"
fi

# wait for database
COUNT=0
while [[ $COUNT -le 30 ]]; do
  sleep 1
  ((COUNT++))
  if ! mysqladmin -h db -u root -p "$MYSQL_ROOT_PASS" status 2> /dev/null | grep -q Uptime; then
    if [[ $COUNT -gt 60 ]]; then
      echo "We failed to connect to the database. Exiting..."
      exit 1
    fi
    echo "Waiting for the database to start. Attempt $COUNT..."
  else
    echo "Database is running..."
    break
  fi
done

# run BlueSky server config
/usr/local/bin/BlueSkyConnect/Server/server-config.sh

# purge hanging sockets/PIDs
rm -f /var/run/fail2ban/*

# create and set perms for www/.ssh
mkdir /var/www/.ssh
chown www-data /var/www/.ssh

# open up perms for a couple keys (needed for web server)
chmod +r /certs/blueskyadmin.key
chmod +r /certs/blueskyclient.key

# set default BlueSky user
if [[ $DEFAULT_USER ]]; then
  echo "$DEFAULT_USER" > /usr/local/bin/BlueSkyConnect/Server/defaultLogin.txt
fi

# migrate SSH wrapper path for existing keys
if [[ ! -e /home/admin/.ssh/.authorized_keys_migrated ]]; then
  sed -i "s|bin/BlueSky/Server|bin/BlueSkyConnect/Server|g" /home/admin/.ssh/authorized_keys
  touch /home/admin/.ssh/.authorized_keys_migrated
fi
if [[ ! -e /home/bluesky/.ssh/.authorized_keys_migrated ]]; then
  sed -i "s|bin/BlueSky/Server|bin/BlueSkyConnect/Server|g" /home/bluesky/.ssh/authorized_keys
  touch /home/bluesky/.ssh/.authorized_keys_migrated
fi

# start it up
exec supervisord -n -c /etc/supervisor/conf.d/supervisord.conf
